# This file is part of PooPyLab.
#
# This file is for archiving the functions developed, tested, but not selected
# for use in the current PooPyLab package. However, these functions can be put
# back into the unit_procs.bio.py file for future testing and use.
#

    def _runge_kutta_4(self, first_index_part, f_s, f_p):
        """
        Integration by using Runge-Kutta 4th order method.
        
        Args:
            first_index_part:   first index of particulate model component;
            f_s:                factor of max step for soluble components;
            f_p:                factor of max step for particulate components.

        Return:
            step size used  # TODO: REVISE TO RETURN STEP SIZE INSTEAD OF NONE

        Note:
            1. The two parameters f_s and f_p came from the IWA Activated
            Sludge Model 1 Report where it talks about the appropriate
            integration step sizes for the soluble and particulate component.
            The report suggested that the integration step sizes can be
            determined by using the actual retention time of the constituent in
            the reactor times f_s (factor for solubles, typ. 5% to 20%) or f_p
            (factor for particulate, can go up to 200%). These two parameters
            were used in the Euler and RK4 methods, but not RKF45.

        See:
            _runge_kutta_fehlberg_45();
            _euler();
        """
        # Determine the next step size based on:
        #   C(t + del_t) = C(t) + (dC/dt) * del_t, where
        #   0 < del_t < Retention_Time_C_k, where
        #   C is the individual model component and k is the kth reactor
        self._del_C_del_t = self._sludge._dCdt(
                            self._mo_comps,
                            self._active_vol,
                            self._total_inflow,
                            self._in_comps)

        #print('self._del_C_del_t:{}'.format(self._del_C_del_t))
        _max_step_sol, _max_step_part = self._max_steps(self._del_C_del_t, 7)

        _step_sol = f_s * _max_step_sol
        _step_part = f_p * _max_step_part

        #self._int_step_sol = min(self._int_step_sol, _new_step_sol)
        #print('step_sol = ', self._int_step_sol)

        #print('sol. step = {}, part. step = {}'.format(_step_sol, _step_part))

        # mid-point version of RK4, using half the given step size:
        #sz_2 = _step / 2
        sz_2 = _step_sol / 2  #TODO: use soluble step for all for now

        # _w1 = yn = self._mo_comps
        # k1 is idetical to self._del_C_del_t calculated above
        k1 = self._del_C_del_t 

        # _w2 = y_n + _step/2 * k1
        _w2 = [self._mo_comps[i] + sz_2 * k1[i] for i in range(len(k1))]

        k2 = self._sludge._dCdt(
                            _w2,
                            self._active_vol,
                            self._total_inflow,
                            self._in_comps)

        # _w3 = y_n + _step/2 * k2
        _w3 = [self._mo_comps[i] + sz_2 * k2[i] for i in range(len(k2))]

        k3 = self._sludge._dCdt(
                            _w3,
                            self._active_vol,
                            self._total_inflow,
                            self._in_comps)

        # _w4 = yn + _step * k3
        _w4 = [self._mo_comps[i] + _step_sol * k3[i] for i in range(len(k3))]

        k4 = self._sludge._dCdt(
                            _w4,
                            self._active_vol,
                            self._total_inflow,
                            self._in_comps)

        self._sludge._comps = [self._sludge._comps[i]
                                + (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6
                                * _step_sol
                                for i in range(len(self._sludge._comps))]

        self._mo_comps = self._sludge._comps[:]

        return None


    def _euler(self, first_index_part=7, f_s=0.05, f_p=2.0):
        """
        Integration by using Euler's method, aka RK1
        
        Args:
            first_index_part: first index of particulate component;
            f_s:    factor of max step for soluble components;
            f_p:    factor of max step for particulate components.

        Return:
            step size used  # TODO: REVISE TO RETURN STEP SIZE INSTEAD OF NONE
            
        See:
            _runge_kutta_fehlberg_45();
            _runge_kutta_4();
        """

        # Determine the next step size based on:
        #   C(t + del_t) = C(t) + (dC/dt) * del_t, where
        #   0 < del_t < Retention_Time_C_k, where
        #   C is the individual model component and k is the kth reactor
        self._del_C_del_t = self._sludge._dCdt(
                            self._mo_comps,
                            self._active_vol,
                            self._total_inflow,
                            self._in_comps)

        #print('self._del_C_del_t:{}'.format(self._del_C_del_t))
        _max_step_sol, _max_step_part = self._max_steps(self._del_C_del_t, 7)

        _step_sol = f_s * _max_step_sol
        _step_part = f_s * _max_step_part

        #self._int_step_sol = min(self._int_step_sol, _new_step_sol)
        #print('step_sol = ', self._int_step_sol)

        #print('sol. step = {}, part. step = {}'.format(_step_sol, _step_part))

        # TODO: use the same time step before further optimization
        #for i in range(first_index_particulate):
            #self._mo_comps[i] += self._del_C_del_t[i] * self._int_step_sol
            
        #for j in range(first_index_particulate, len(self._mo_comps)):
            #self._mo_comps[j] += self._del_C_del_t[j] * self._int_step_part

        for i in range(len(self._mo_comps)):
            self._sludge._comps[i] += self._del_C_del_t[i] * _step_sol

        self._mo_comps = self._sludge._comps[:]

        return None


